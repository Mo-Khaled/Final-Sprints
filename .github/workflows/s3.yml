name: Create S3
on:
  workflow_dispatch:
  push:
    branches: [ main, Terraform ]

jobs:
  setup-terraform-backend:
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: mokhaled-bucket-1286
      DYNAMODB_TABLE: terraform-lock  # âœ… Match your Terraform config
      AWS_REGION: us-west-2
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Create S3 bucket (if not exists)
        run: |
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "âœ… S3 bucket '$BUCKET_NAME' already exists"
          else
            echo "ðŸ“¦ Creating S3 bucket '$BUCKET_NAME' in $AWS_REGION"

            # Special case: us-east-1 doesn't accept LocationConstraint
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region "$AWS_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi

            # âœ… Enable versioning and encryption
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled

            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'

            echo "âœ… S3 bucket created with versioning and encryption"
          fi

      - name: Create DynamoDB table (if not exists)
        run: |
          if ! aws dynamodb describe-table --table-name terraform-lock >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name terraform-lock \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "DynamoDB table terraform-lock created"
          else
            echo "DynamoDB table already exists"
          fi